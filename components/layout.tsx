import Head from "next/head";
import React, { useState } from "react";
import { Button, Layout, Menu, message, Popover } from "antd";
import "antd/dist/antd.css";
import type { MenuProps } from "antd";
import Link from "next/link";
import Image from "next/image";
import {
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  UserOutlined,
  AppstoreOutlined,
} from "@ant-design/icons";
import logo from "../public/logo.png";
import styled from "styled-components";
import axios, { AxiosError, AxiosResponse } from "axios";
import Router from "next/router";
import { BaseURL } from "../service/api";

const { Header, Sider, Content } = Layout;

const ImageContainer = styled.div`
  height: 80px;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 10;
`;
const StyledHeader = styled(Header)`
  padding: 0 50px;
  height: 80px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: sticky;
  top: 0;
  z-index: 9;
`;
const LogoutButton = styled(Popover)`
  display: flex;
  align-items: center;
  justify-content: center;
`;
const StyledContent = styled(Content)`
  margin: 24px 16px;
  padding: 24;
  min-height: calc(100vh - 128px);
  background-color: white;
`;

type MenuItem = Required<MenuProps>["items"][number];

export default function MainLayout({ children }: React.PropsWithChildren<{}>) {
  const [collapsed, setCollapsed] = useState(false);
  const toggleCollapsed = () => {
    setCollapsed(!collapsed);
  };

  const logout = async () => {
    const token = JSON.parse(localStorage.getItem("cms-user") as string).token;

    try {
      const res: AxiosResponse = await axios.post(
        `${BaseURL}/logout`,
        {},
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      if (res) {
        localStorage.removeItem("cms-user");
        Router.push("/");
      }
    } catch (err: any) {
      message.error(err.response.data.msg);
    }
  };

  const getItem = (
    label: React.ReactNode,
    key: React.Key,
    icon?: React.ReactNode,
    children?: MenuItem[],
    type?: "group"
  ): MenuItem =>
    ({
      key,
      icon,
      children,
      label,
      type,
    } as MenuItem);

  // menu items
  const items = [
    getItem("Overview", "1", <AppstoreOutlined />),
    getItem("Student", "sub1", <AppstoreOutlined />, [
      getItem("Student List", "2"),
    ]),
    getItem("Teacher", "sub2", <AppstoreOutlined />, [
      getItem("Teacher List", "3"),
    ]),
    getItem("Course", "sub3", <AppstoreOutlined />, [
      getItem("All Course", "4"),
      getItem("Add Course", "5"),
      getItem("Edit Course", "6"),
    ]),
    getItem("Message", "7", <AppstoreOutlined />),
  ];

  return (
    <>
      <Head>
        <title>Course Management System</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Layout>
        <Sider
          trigger={null}
          collapsible
          collapsed={collapsed}
          width={222}
          defaultCollapsed={true}
          collapsedWidth={100}
        >
          <ImageContainer>
            <Link href="/" passHref>
              <span style={{ cursor: "pointer" }}>
                <Image src={logo} alt="logo" width="70" height="70" />
              </span>
            </Link>
          </ImageContainer>

          <Menu
            theme="dark"
            mode="inline"
            inlineCollapsed={collapsed}
            style={{ position: "sticky", top: "80px", fontSize: "16px" }}
            items={items}
          />
        </Sider>

        <Layout className="site-layout">
          <StyledHeader className="site-layout-background">
            <Button
              icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
              onClick={toggleCollapsed}
              size="large"
              type="text"
              style={{
                color: "white",
                border: "none",
                backgroundColor: "transparent",
              }}
            />

            <LogoutButton
              content={
                <Button type="link" onClick={logout}>
                  Logout
                </Button>
              }
              trigger="hover"
            >
              <Button icon={<UserOutlined />} shape="circle" />
            </LogoutButton>
          </StyledHeader>

          <StyledContent className="site-layout-background ">
            {children}
          </StyledContent>
        </Layout>
      </Layout>
    </>
  );
}
